#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>

#include "FS.h" //library used to handle files
#include "SD.h" //library used to interface with the SD card
#include "SPI.h" //library used for SPI communication protocol

//definitions of chip select
#define RFCSN 5 

#include "WiFi.h"
#include "ESPAsyncWebServer.h"

int TempHum[2] = {0,0};

int currentTemp = 0;
int currentHum = 0;
 
// Replace with your network credentials
const char* ssid = "NETGEAR05";
const char* password = "modernroad089";

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(

<!DOCTYPE HTML><html>

<head>

  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">

  <style>

    html {

     font-family: Arial;

     display: inline-block;

     margin: 0px auto;

     text-align: center;

    }

    h2 { font-size: 3.0rem; }

    p { font-size: 3.0rem; }

    .units { font-size: 1.2rem; }

    .dht-labels{

      font-size: 1.5rem;

      vertical-align:middle;

      padding-bottom: 15px;

    }

  </style>

</head>

<body>

  <h2>ESP32 DHT Server</h2>

  <p>

    <i class="fas fa-thermometer-half" style="color:#059e8a;"></i>

    <span class="dht-labels">Temperature</span>

    <span id="temperature">%TEMPERATURE%</span>

    <sup class="units">&deg;C</sup>

  </p>

  <p>

    <i class="fas fa-tint" style="color:#00add6;"></i>

    <span class="dht-labels">Humidity</span>

    <span id="humidity">%HUMIDITY%</span>

    <sup class="units">&percnt;</sup>

  </p>

</body>

<script>

setInterval(function ( ) {

  var xhttp = new XMLHttpRequest();

  xhttp.onreadystatechange = function() {

    if (this.readyState == 4 && this.status == 200) {

      document.getElementById("temperature").innerHTML = this.responseText;

    }

  };

  xhttp.open("GET", "/temperature", true);

  xhttp.send();

}, 1000 ) ;

 

setInterval(function ( ) {

  var xhttp = new XMLHttpRequest();

  xhttp.onreadystatechange = function() {

    if (this.readyState == 4 && this.status == 200) {

      document.getElementById("humidity").innerHTML = this.responseText;

    }

  };

  xhttp.open("GET", "/humidity", true);

  xhttp.send();

}, 1000 ) ;

</script>

</html>)rawliteral";

 
// Replaces placeholder with DHT values

String processor(const String &var){
  //Serial.println(var);
  char Temp[32];
  char Hum[32];

  itoa(TempHum[0], Temp, 10);
  itoa(TempHum[1], Hum, 10);

  if(var == "TEMPERATURE"){
    return Temp;
  }

  else if(var == "HUMIDITY"){
    return Hum;
  }

  return String();

}

String readDHTTemperature() {
  if(TempHum[0] == -271 && TempHum[1] == 0){
    TempHum[0] = currentTemp;
    TempHum[1] = currentHum;
  }
  return String(TempHum[0]);
}

String readDHTHumidity() {
  if(TempHum[0] == -271 && TempHum[1] == 0){
    TempHum[0] = currentTemp;
    TempHum[1] = currentHum;
  }
  return String(TempHum[1]);
}



//**THIS IS THE RECIEVER CODE

RF24 radio(4, RFCSN); //CE, CSN, create an instance of the RF

const byte address[6] = "00001";

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);

  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("Connected.");
  

  // Print ESP32 Local IP Address
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  // Route for root / web page

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){

    request->send_P(200, "text/html", index_html, processor);

  });

  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request){

    request->send_P(200, "text/plain", readDHTTemperature().c_str());

  });

  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest *request){

    request->send_P(200, "text/plain", readDHTHumidity().c_str());

  });

  // Start server
  server.begin();
  radio.begin();
  radio.openReadingPipe(0, address); //open a pipe to read
  radio.setPALevel(RF24_PA_MIN);
  radio.startListening();
}

void loop() {
  if(radio.available()){
    radio.read(TempHum, sizeof(TempHum));
    if(TempHum[0] == -271){
      Serial.println("Test recieve successful");
    }
    else{
      currentTemp = TempHum[0];
      currentHum = TempHum[1];
      Serial.println("Recieved readings: ");
      Serial.print("Temperature: ");
      Serial.print(TempHum[0]);
      Serial.print(" Â°C\tHumidity: ");
      Serial.print(TempHum[1]);
      Serial.println(" %");
      Serial.println("--------------------------------------------------");
    }
  }
}

